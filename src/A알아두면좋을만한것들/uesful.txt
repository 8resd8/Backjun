어떤 것을 자르고 면적의 최대값: 과거의산물.정렬


# MST, 최소 스패닝 트리
바로 PQ에 넣기
t = Integer.parseInt(st.nextToken());
PriorityQueue<Edge> pq = new PriorityQueue<>();
parent = new int[N + 1];
for (int i = 0; i < N + 1; i++) {
    parent[i] = i;
}

for (int i = 0; i < M; i++) {
    st = new StringTokenizer(br.readLine());
    int start = Integer.parseInt(st.nextToken());
    int end = Integer.parseInt(st.nextToken());
    int cost = Integer.parseInt(st.nextToken());
    pq.add(new Edge(start, end, cost));
}


# 다익스트라
2중 리스트에 Edge넣고 방향성에 따른 값 넣기,
Edge에는 end, cost만 있음.

static class Edge implements Comparable<Edge> {
        int end, cost;

        Edge(int end, int cost) {
            this.end = end;
            this.cost = cost;
        }

        @Override
        public int compareTo(Edge o) {
            return Integer.compare(cost, o.cost);
        }
    }

static int N, E;
static ArrayList<ArrayList<Edge>> adj;
static int[] dist;
static boolean cant;

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String[] input = br.readLine().split(" ");
    N = Integer.parseInt(input[0]); // 정점
    E = Integer.parseInt(input[1]); // 간선
    adj = new ArrayList<>();
    for (int i = 0; i < N + 1; i++) {
        adj.add(new ArrayList<>());
    }

    for (int i = 0; i < E; i++) {
        StringTokenizer st = new StringTokenizer(br.readLine());
        int start = Integer.parseInt(st.nextToken());
        int end = Integer.parseInt(st.nextToken());
        int cost = Integer.parseInt(st.nextToken());
        adj.get(start).add(new Edge(end, cost)); // 방향성이 없다 -> 양방향
        adj.get(end).add(new Edge(start, cost));
    }